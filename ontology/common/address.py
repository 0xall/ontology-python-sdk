from ontology.utils import util

ADDR_LEN = 20  # the size of address should be 20 bytes


def address_parse_from_bytes(addr: bytearray) -> bytearray:
    if len(addr) != ADDR_LEN:
        raise ValueError("[common]: address_parse_from_bytes error, len != 20")
    return addr  # [20]byte


def address_from_hex_string(s: str) -> bytearray:
    hx = util.hex_to_bytes(s)
    return address_parse_from_bytes(util.to_array_reverse(hx))


def address_from_base58(encoded: str) -> bytearray:
    pass  # TODO


ont_contract_address = address_parse_from_bytes(bytearray(
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x01]))
ong_contract_address = address_parse_from_bytes(bytearray(
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x02]))
ont_id_contract_address = address_parse_from_bytes(bytearray(
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x03]))
param_contract_address = address_parse_from_bytes(bytearray(
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x04]))
auth_contract_address = address_parse_from_bytes(bytearray(
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x06]))
governance_contract_address = address_parse_from_bytes(bytearray(
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x07]))
